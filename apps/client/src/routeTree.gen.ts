/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as BuilderRouteRouteImport } from './routes/builder/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BuilderQueryRouteRouteImport } from './routes/builder/query/route'
import { Route as BuilderFormRouteRouteImport } from './routes/builder/form/route'
import { Route as BuilderQueryIndexRouteImport } from './routes/builder/query/index'
import { Route as BuilderFormIndexRouteImport } from './routes/builder/form/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'
import { Route as appDashboardIndexRouteImport } from './routes/(app)/dashboard/index'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api/users.$userId'

const rootServerRouteImport = createServerRootRoute()

const BuilderRouteRoute = BuilderRouteRouteImport.update({
  id: '/builder',
  path: '/builder',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BuilderQueryRouteRoute = BuilderQueryRouteRouteImport.update({
  id: '/query',
  path: '/query',
  getParentRoute: () => BuilderRouteRoute,
} as any)
const BuilderFormRouteRoute = BuilderFormRouteRouteImport.update({
  id: '/form',
  path: '/form',
  getParentRoute: () => BuilderRouteRoute,
} as any)
const BuilderQueryIndexRoute = BuilderQueryIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BuilderQueryRouteRoute,
} as any)
const BuilderFormIndexRoute = BuilderFormIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BuilderFormRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authRouteRoute,
} as any)
const appDashboardIndexRoute = appDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => appRouteRoute,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/builder': typeof BuilderRouteRouteWithChildren
  '/builder/form': typeof BuilderFormRouteRouteWithChildren
  '/builder/query': typeof BuilderQueryRouteRouteWithChildren
  '/dashboard': typeof appDashboardIndexRoute
  '/login': typeof authLoginIndexRoute
  '/builder/form/': typeof BuilderFormIndexRoute
  '/builder/query/': typeof BuilderQueryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/builder': typeof BuilderRouteRouteWithChildren
  '/dashboard': typeof appDashboardIndexRoute
  '/login': typeof authLoginIndexRoute
  '/builder/form': typeof BuilderFormIndexRoute
  '/builder/query': typeof BuilderQueryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/builder': typeof BuilderRouteRouteWithChildren
  '/builder/form': typeof BuilderFormRouteRouteWithChildren
  '/builder/query': typeof BuilderQueryRouteRouteWithChildren
  '/(app)/dashboard/': typeof appDashboardIndexRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/builder/form/': typeof BuilderFormIndexRoute
  '/builder/query/': typeof BuilderQueryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/builder'
    | '/builder/form'
    | '/builder/query'
    | '/dashboard'
    | '/login'
    | '/builder/form/'
    | '/builder/query/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/builder'
    | '/dashboard'
    | '/login'
    | '/builder/form'
    | '/builder/query'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(auth)'
    | '/builder'
    | '/builder/form'
    | '/builder/query'
    | '/(app)/dashboard/'
    | '/(auth)/login/'
    | '/builder/form/'
    | '/builder/query/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
  BuilderRouteRoute: typeof BuilderRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/users' | '/api/users/$userId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/users' | '/api/users/$userId'
  id: '__root__' | '/api/users' | '/api/users/$userId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/builder': {
      id: '/builder'
      path: '/builder'
      fullPath: '/builder'
      preLoaderRoute: typeof BuilderRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/builder/query': {
      id: '/builder/query'
      path: '/query'
      fullPath: '/builder/query'
      preLoaderRoute: typeof BuilderQueryRouteRouteImport
      parentRoute: typeof BuilderRouteRoute
    }
    '/builder/form': {
      id: '/builder/form'
      path: '/form'
      fullPath: '/builder/form'
      preLoaderRoute: typeof BuilderFormRouteRouteImport
      parentRoute: typeof BuilderRouteRoute
    }
    '/builder/query/': {
      id: '/builder/query/'
      path: '/'
      fullPath: '/builder/query/'
      preLoaderRoute: typeof BuilderQueryIndexRouteImport
      parentRoute: typeof BuilderQueryRouteRoute
    }
    '/builder/form/': {
      id: '/builder/form/'
      path: '/'
      fullPath: '/builder/form/'
      preLoaderRoute: typeof BuilderFormIndexRouteImport
      parentRoute: typeof BuilderFormRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(app)/dashboard/': {
      id: '/(app)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
  }
}

interface appRouteRouteChildren {
  appDashboardIndexRoute: typeof appDashboardIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appDashboardIndexRoute: appDashboardIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface BuilderFormRouteRouteChildren {
  BuilderFormIndexRoute: typeof BuilderFormIndexRoute
}

const BuilderFormRouteRouteChildren: BuilderFormRouteRouteChildren = {
  BuilderFormIndexRoute: BuilderFormIndexRoute,
}

const BuilderFormRouteRouteWithChildren =
  BuilderFormRouteRoute._addFileChildren(BuilderFormRouteRouteChildren)

interface BuilderQueryRouteRouteChildren {
  BuilderQueryIndexRoute: typeof BuilderQueryIndexRoute
}

const BuilderQueryRouteRouteChildren: BuilderQueryRouteRouteChildren = {
  BuilderQueryIndexRoute: BuilderQueryIndexRoute,
}

const BuilderQueryRouteRouteWithChildren =
  BuilderQueryRouteRoute._addFileChildren(BuilderQueryRouteRouteChildren)

interface BuilderRouteRouteChildren {
  BuilderFormRouteRoute: typeof BuilderFormRouteRouteWithChildren
  BuilderQueryRouteRoute: typeof BuilderQueryRouteRouteWithChildren
}

const BuilderRouteRouteChildren: BuilderRouteRouteChildren = {
  BuilderFormRouteRoute: BuilderFormRouteRouteWithChildren,
  BuilderQueryRouteRoute: BuilderQueryRouteRouteWithChildren,
}

const BuilderRouteRouteWithChildren = BuilderRouteRoute._addFileChildren(
  BuilderRouteRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
  BuilderRouteRoute: BuilderRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
